# This is a basic workflow to help you get started with Actions

name: Deploy ELMS backend to ECR

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [backend-ci]
  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  createrepo:
    name: Create AWS ECR repository
    needs: buildfrontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "./backend/IaC/ecr"
    env:
      TF_ACTION_WORKING_DIR: "./backend/IaC/ecr"
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2.0.0
      - name: "Configure AWS Credentials"
        uses: clouddrove/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: us-west-1
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        env:
          tf_actions_working_dir: "./backend/IaC/ecr"
      - name: Terraform Init
        id: init
        run: terraform init
        env:
          tf_actions_working_dir: "./backend/IaC/ecr"
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        env:
          tf_actions_working_dir: "./backend/IaC/ecr"
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false
        env:
          tf_actions_working_dir: "./backend/IaC/ecr"
        continue-on-error: true
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false
        env:
          tf_actions_working_dir: "./backend/IaC/ecr"
        continue-on-error: true
  build:
    needs: createrepo
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install yarn
        run: npm install -g yarn
      - name: Install dependencies check
        run: |
            ls 
            cd frontend 
            ls 
            yarn install
          
      - name: Build site
        run: |
         cd frontend 
         yarn build
      - name: Test check
        run: |
          pwd
          ls
          cd frontend/build
          ls
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Instantiate Docker Meta
        id: meta
        uses: crazy-max/ghaction-docker-meta@v3.7.0
        with:
          images: elms-repository/elms-backend
          tags: |
            type=raw,value=elms-repository/elms-backend-{{branch}}-{{sha}}
      - name: print name
        id: echometa
        env:
          values: ${{steps.meta.outputs.tags}}
        run: |
          echo "Hello" 
          echo $values
      - name: Set outputs
        id: shainput
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
      - name: Check outputs
        run: echo ${{ steps.shainput.outputs.sha_short }}
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: elms-repository
          IMAGE_TAG: ${{github.sha}}
          IMAGE_NAME: ${{steps.shainput.outputs.sha_short}}
        run: |
          pwd
          ls
          cp -R frontend/build backend/elms-backend/public
          cd backend/elms-backend/public
          ls
          cd ../../../
          pwd
          ls
          cd backend/elms-backend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY
  updatefargate:
    needs: build
    name: Update ECS Fargate
    runs-on: ubuntu-latest
    env:
      working-directory: "./backend/elms-backend"
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Update ECS fargate service to pull the new image
        run: |
          aws ecs update-service --cluster elms-cluster --service elms-service --force-new-deployment 

          
